package puzzle

import (
	"strconv"
	"testing"

	"powquote/internal/protocol"

	"github.com/stretchr/testify/assert"
)

func TestSolve(t *testing.T) {
	tests := []struct {
		seed      int64
		hashData  protocol.HashData
		challenge protocol.Challenge
		want      string
	}{
		{
			seed: 1663495396552591300,
			hashData: protocol.HashData{
				ClientID:    "172.18.0.3",
				NonceServer: 16935467492618540462,
				NonceClient: 12840389312435028523,
				Solution:    []byte{0x57, 0x96, 0xa, 0x31, 0x45, 0x2b, 0xc6, 0xee, 0x8, 0x90, 0xde, 0x2b, 0x72, 0xae, 0x70, 0xd6, 0x8c, 0xd3, 0x7d, 0x8a, 0xf3, 0x28, 0xbd, 0x7b, 0xb3, 0x4a, 0x4a, 0x1d, 0xf7, 0xb1, 0x4b, 0x64, 0x0, 0x4c, 0x5c, 0x31, 0x80, 0xef, 0x9b, 0x76, 0x5c, 0xc6, 0x63, 0xc1, 0xaa, 0xf6, 0x33, 0xfc, 0xbc, 0xa0, 0x79, 0xee, 0xc, 0x70, 0xec, 0xc4, 0x91, 0x2, 0xd7, 0xec, 0xf7, 0x20, 0x50, 0xb6, 0xa0, 0x87, 0xf2, 0x60, 0x17, 0x6b, 0x7b, 0xf1, 0x72, 0x6d, 0x58, 0x25, 0xda, 0x92, 0xb9, 0x95, 0x97, 0x82, 0x84, 0x45, 0x11, 0x43, 0xdb, 0x54, 0x9e, 0x4, 0xa, 0xbd, 0xd9, 0xfa, 0xe6, 0x1f, 0x9b, 0xa3, 0xcc, 0x51, 0xae, 0x8f, 0x5e, 0xbc, 0x9a, 0x72, 0xe5, 0x37, 0x2a, 0x79, 0x8, 0x80, 0x9b, 0x7b, 0xea, 0xc3, 0x86, 0x3c, 0xfb, 0xa2, 0x6, 0xbf, 0x91, 0x76, 0x14, 0xe4, 0xb6, 0xb7},
			},
			challenge: protocol.Challenge{
				Nonce:      16935467492618540462,
				Complexity: 6,
			},
			want: "0000003e902d86cf474ed70a2a7319a06c9fe315",
		},
	}
	for name, tt := range tests {
		t.Run(strconv.Itoa(name), func(t *testing.T) {
			solutionSeed = tt.seed
			assert.Equalf(t, tt.want, Solve(&tt.hashData, tt.challenge), "Solve(%v, %v)", tt.hashData, tt.challenge)
		})
	}
}
